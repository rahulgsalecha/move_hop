package com.example.hop;

import java.util.ArrayList;
import java.util.List;

import android.app.Activity;
import android.app.ListActivity;
import android.content.ClipData.Item;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.parse.FindCallback;
import com.parse.GetCallback;
import com.parse.ParseException;
import com.parse.ParseObject;
import com.parse.ParseQuery;

public class UserSelections extends Activity
{
	static ArrayList<MoverItems> movers = new ArrayList<MoverItems>();
  private static String logtag = "User Selections Page";
  static String user_data;
  static String user_start_time;
  static String user_end_time;
  static String user_date;
  static String user_location;
  
  static ArrayList<String> mover_data = new ArrayList<String>();
  static ArrayList<String> mover_start_time = new ArrayList<String>();
  static ArrayList<String> mover_end_time = new ArrayList<String>();
  static ArrayList<String> mover_date = new ArrayList<String>();
  static ArrayList<String> mover_location = new ArrayList<String>();
  
  public void onBackPressed()
  {
    setResult(-1, new Intent());
    finish();
  }

  protected void onCreate(Bundle savedInstanceState)
  {
	  super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_custom_list);
		Intent localIntent = getIntent();
		
		user_data = localIntent.getStringExtra("user");
	    user_start_time = localIntent.getStringExtra("start_time");
	    user_end_time = localIntent.getStringExtra("end_time");
	    user_date = localIntent.getStringExtra("date");
	    user_location = localIntent.getStringExtra("location");
		
		populateMoversList();
  }
  
  private void populateMoversList() {
	   
	  // Construct the data source
			ArrayList<MoverItems> arrayOfMovers = parseAllMovers();
			// Create the adapter to convert the array to views
			MoverAdapter adapter = new MoverAdapter(this, arrayOfMovers);
			// Attach the adapter to a ListView
			final ListView listView = (ListView) findViewById(R.id.lvUsers);
			listView.setAdapter(adapter);
			
			
			// ListView Item Click Listener
            listView.setOnItemClickListener(new OnItemClickListener() {
 
                  @Override
                  public void onItemClick(AdapterView<?> parent, View view,
                     int position, long id) {
                    
                   // ListView Clicked item index
                   int itemPosition     = position;
                   
                   // ListView Clicked item value
                   String  itemValue    = (String) listView.getItemAtPosition(position);
                      
                    // Show Alert 
                    Toast.makeText(getApplicationContext(),
                      "Position :"+itemPosition+"  ListItem : " +itemValue , Toast.LENGTH_LONG)
                      .show();
                 
                  }
    
             }); 
			}
  
  public static ArrayList<MoverItems> parseAllMovers() {
		 
	    ParseQuery<ParseObject> query = ParseQuery.getQuery("MoverDataStore");
	    query.whereEqualTo("mover", user_data);
	    query.findInBackground(new FindCallback<ParseObject>() {
	    	
	    	public void done(List<ParseObject> moverList, ParseException e) {
	        if (e == null && moverList != null)
	        {
	        	if(!(moverList.isEmpty()))
	        	{
	        		int size = moverList.size();
	        		int i=0;
	        		while (i < size) 
	                {	        		
	        			//items.add((ParseObject) moverList);
	        			/*movers.add(new MoverItems(moverList.get(i).getString("mover"),
	        					moverList.get(i).getString("start_time"),
	        					moverList.get(i).getString("end_time"),
	        					moverList.get(i).getString("date"),
	        					moverList.get(i).getString("location")));*/
	        			
	        			mover_data.set(i,moverList.get(i).getString("mover"));
	        			mover_start_time.set(i,moverList.get(i).getString("start_time"));
	        			mover_end_time.set(i,moverList.get(i).getString("end_time"));
	        			mover_date.set(i,moverList.get(i).getString("date"));
	        			mover_location.set(i,moverList.get(i).getString("location"));
	        				        			
	        			//System.out.println(movers.get(i).getLocation());
	        			i++;
	                }
	        		
	        		//System.out.println("Return items, size : " + movers.size());
	        		
	        	}
	        	//System.out.println("Return items, size : " + movers.size());
	        }
	        //System.out.println("Return items, size : " + movers.size());
	      }
	    	
	    	
	    });
	    //System.out.println("Return items, size : " + movers.size());
	    
	    int size1 = mover_data.size();
	    int j= 0;
	    
	    while (j < size1) 
        {
	    	movers.add(new MoverItems(mover_data.get(j),
	    			mover_start_time.get(j),
	    			mover_end_time.get(j),
	    			mover_date.get(j),
	    			mover_location.get(j)));
        }
	    
	    
		return movers;
	}

  protected void onDestroy()
  {
    Log.d(logtag, "onDestroy() called");
    super.onDestroy();
  }

  protected void onPause()
  {
    Log.d(logtag, "onPause() called");
    super.onPause();
  }

  protected void onRestart()
  {
    super.onRestart();
  }

  protected void onResume()
  {
    Log.d(logtag, "onResume() called");
    super.onResume();
  }

  protected void onStart()
  {
    Log.d(logtag, "onStart() called");
    super.onStart();
  }

  protected void onStop()
  {
    Log.d(logtag, "onStop() called");
    super.onStop();
  }
}

/* Location:           /Users/rsalecha/Downloads/dex2jar-0.0.9.15/classes_dex2jar.jar
 * Qualified Name:     com.example.hop.UserSelections
 * JD-Core Version:    0.6.2
 */